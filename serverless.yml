service: speedbuildtemplate
frameworkVersion: '2'

provider:
  name: aws
  runtime: go1.x
  lambdaHashingVersion: 20201221
  profile: ${env:AWS_PROFILE}
  region: ${env:AWS_REGION}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { 'Fn::GetAtt': ['TableCount', 'Arn'] }

  environment:
    STAGE: ${sls:stage}
    COGNITO_CLIENT_ID: ${env:COGNITO_CLIENT_ID}
    STRIPE_PRICE_ID: ${env:STRIPE_PRICE_ID}
    STRIPE_KEY: ${env:STRIPE_KEY}
    BASE_URL: ${env:BASE_URL}
    STRIPE_ENDPOINT_SECRET: ${env:STRIPE_ENDPOINT_SECRET}


  httpApi:
    cors: true
    authorizers:
      serviceAuthorizer:
        identitySource: $request.header.Authorization
        issuerUrl: 
          Fn::Join:
          - ''
          - - 'https://cognito-idp.'
            - '${self:provider.region}'
            - '.amazonaws.com/'
            - Ref: serviceUserPool
        audience:
          - Ref: serviceUserPoolClient

package:
  individually: true

functions:
  counter:
    handler: back/bin/counter_api
    package:
      patterns:
        - '!./**'
        - ./back/bin/counter_api
    events:
      - httpApi:
          path: /users
          method: get
      - httpApi:
          path: /users/{username}
          method: get
      - httpApi:
          path: /count
          method: patch
          authorizer: serviceAuthorizer

      # Account/subscription management
      - httpApi:
          path: /subscription/activation_url
          method: get
          authorizer: serviceAuthorizer
      - httpApi:
          path: /subscription/cancel
          method: post
          authorizer: serviceAuthorizer
      - httpApi:
          path: /subscription/webhook
          method: post

  cognitoHandlers:
    handler: back/bin/preSignUp
    package:
      patterns:
        - '!./**'
        - ./back/bin/preSignUp
    events:
      - cognitoUserPool:
          pool: service-user-pool-${sls:stage}
          existing: true
          trigger: PreSignUp

resources:
  Resources:
    TableCount:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${sls:stage}-counts
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
          #HttpApi:
          #DependsOn: serviceUserPool
    serviceUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: service-user-pool-${sls:stage}
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
        Policies:
          PasswordPolicy:
              MinimumLength: 6
              RequireLowercase: false
              RequireNumbers: false
              RequireSymbols: false
              RequireUppercase: false
              TemporaryPasswordValidityDays: 7


    serviceUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: service-user-pool-client-${sls:stage}
        UserPoolId:
          Ref: serviceUserPool
        AccessTokenValidity: 24
        AllowedOAuthFlows: 
          - code
        AllowedOAuthFlowsUserPoolClient: true
        AllowedOAuthScopes: 
          - email
          - openid
          - profile
            #- String
            #AnalyticsConfiguration: 
            #AnalyticsConfiguration
        CallbackURLs: 
          - http://localhost:3000/
            #DefaultRedirectURI: String
            #EnableTokenRevocation: Boolean
        ExplicitAuthFlows: 
          - ALLOW_USER_SRP_AUTH
          - ALLOW_CUSTOM_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
          - ALLOW_USER_PASSWORD_AUTH
        GenerateSecret: false
        IdTokenValidity: 24
        LogoutURLs: 
          - http://localhost:3000/signout
        #PreventUserExistenceErrors: String
        ReadAttributes: 
          - name
          - email
          - preferred_username
        RefreshTokenValidity: 3650
        SupportedIdentityProviders: 
          - COGNITO
        #TokenValidityUnits: 
        WriteAttributes: 
          - name
          - email
          - preferred_username

            #serviceUserPoolDomain:
            #Type: AWS::Cognito::UserPoolDomain 
            #Properties:
            #UserPoolId: 
            #Ref: serviceUserPool
            #Domain: service-user-pool-domain-${opt:stage, self:provider.stage}-${self:provider.environment.DOMAIN_SUFFIX}

  Outputs:
    UserPoolId:
      Value:
        Ref: serviceUserPool
    UserPoolClientId:
      Value:
        Ref: serviceUserPoolClient

# v3.0.0
useDotenv: true
variablesResolutionMode: 20210326
